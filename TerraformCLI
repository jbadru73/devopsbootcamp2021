user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
-State of Terraform B4 it was bootstraped

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region  = "eu-west-1"
}

resource "aws_instance" "app_server" {
  ami           = "ami-02b4e72b17337d6c1"
  instance_type = "t2.micro"
  key_name      = "GeneralKP"

  tags = {
    Name = "WebServer"
  }
}

-Bootstrap.txt
#!/bin/bash
sudo amazon-linux-extras install nginx1 -y
sudo yum install maven git tomcat

-Terraform after Bootstrapped
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.27"
    }
  }

  required_version = ">= 0.14.9"
}

provider "aws" {
  profile = "default"
  region  = "eu-west-1"
}

data "template_file" "ec2_user_data" {
  template = file("${path.module}/bootstrap.txt")
}
resource "aws_instance" "app_server" {
  ami           = "ami-02b4e72b17337d6c1"
  instance_type = "t2.micro"
  key_name      = "GeneralKP"
  user_data     = data.template_file.ec2_user_data.template

  tags = {
    Name = "WebServer2"
  }
}

$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/template...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Installing hashicorp/template v2.2.0...
- Installed hashicorp/template v2.2.0 (signed by HashiCorp)
- Using previously-installed hashicorp/aws v3.54.0

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ terraform fmt
terraform101.tf

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ terraform plan
aws_instance.app_server: Refreshing state... [id=i-07a23f0bb70a9713e]

Terraform used the selected providers to generate the following execution plan. Resource  
actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.app_server must be replaced
-/+ resource "aws_instance" "app_server" {
      ~ arn                                  = "arn:aws:ec2:eu-west-1:257095761812:instance/i-07a23f0bb70a9713e" -> (known after apply)
      ~ associate_public_ip_address          = true -> (known after apply)
      ~ availability_zone                    = "eu-west-1b" -> (known after apply)        
      ~ cpu_core_count                       = 1 -> (known after apply)
      ~ cpu_threads_per_core                 = 1 -> (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-07a23f0bb70a9713e" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      ~ primary_network_interface_id         = "eni-0886ee03687b64e4d" -> (known after apply)
      ~ private_dns                          = "ip-172-31-2-245.eu-west-1.compute.internal" -> (known after apply)
      ~ private_ip                           = "172.31.2.245" -> (known after apply)      
      ~ public_dns                           = "ec2-34-253-209-59.eu-west-1.compute.amazonaws.com" -> (known after apply)
      ~ public_ip                            = "34.253.209.59" -> (known after apply)     
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [
          - "default",
        ] -> (known after apply)
      ~ subnet_id                            = "subnet-924855f4" -> (known after apply)   
      ~ tags                                 = {
          ~ "Name" = "WebServer" -> "WebServer2"
        }
      ~ tags_all                             = {
          ~ "Name" = "WebServer" -> "WebServer2"
        }
      ~ tenancy                              = "default" -> (known after apply)
      + user_data                            = "dfc35b460b42a4aaef68e926aa30ebafa7256a81" 
# forces replacement
      + user_data_base64                     = (known after apply)
      ~ vpc_security_group_ids               = [
          - "sg-c58fa29b",
        ] -> (known after apply)
        # (5 unchanged attributes hidden)

      ~ capacity_reservation_specification {
          ~ capacity_reservation_preference = "open" -> (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      ~ enclave_options {
          ~ enabled = false -> (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/xvda" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 100 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ tags                  = {} -> (known after apply)
          ~ throughput            = 0 -> (known after apply)
          ~ volume_id             = "vol-08c30ecb7c22e3c73" -> (known after apply)        
          ~ volume_size           = 8 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

───────────────────────────────────────────────────────────────────────────────────────── 

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to   
take exactly these actions if you run "terraform apply" now.

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ terraform apply
aws_instance.app_server: Refreshing state... [id=i-07a23f0bb70a9713e]

Terraform used the selected providers to generate the following execution plan. Resource  
actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.app_server must be replaced
-/+ resource "aws_instance" "app_server" {
      ~ arn                                  = "arn:aws:ec2:eu-west-1:257095761812:instance/i-07a23f0bb70a9713e" -> (known after apply)
      ~ associate_public_ip_address          = true -> (known after apply)
      ~ availability_zone                    = "eu-west-1b" -> (known after apply)        
      ~ cpu_core_count                       = 1 -> (known after apply)
      ~ cpu_threads_per_core                 = 1 -> (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-07a23f0bb70a9713e" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      ~ primary_network_interface_id         = "eni-0886ee03687b64e4d" -> (known after apply)
      ~ private_dns                          = "ip-172-31-2-245.eu-west-1.compute.internal" -> (known after apply)
      ~ private_ip                           = "172.31.2.245" -> (known after apply)      
      ~ public_dns                           = "ec2-34-253-209-59.eu-west-1.compute.amazonaws.com" -> (known after apply)
      ~ public_ip                            = "34.253.209.59" -> (known after apply)     
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [
          - "default",
        ] -> (known after apply)
      ~ subnet_id                            = "subnet-924855f4" -> (known after apply)   
      ~ tags                                 = {
          ~ "Name" = "WebServer" -> "WebServer2"
        }
      ~ tags_all                             = {
          ~ "Name" = "WebServer" -> "WebServer2"
        }
      ~ tenancy                              = "default" -> (known after apply)
      + user_data                            = "dfc35b460b42a4aaef68e926aa30ebafa7256a81" 
# forces replacement
      + user_data_base64                     = (known after apply)
      ~ vpc_security_group_ids               = [
          - "sg-c58fa29b",
        ] -> (known after apply)
        # (5 unchanged attributes hidden)

      ~ capacity_reservation_specification {
          ~ capacity_reservation_preference = "open" -> (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      ~ enclave_options {
          ~ enabled = false -> (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/xvda" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 100 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ tags                  = {} -> (known after apply)
          ~ throughput            = 0 -> (known after apply)
          ~ volume_id             = "vol-08c30ecb7c22e3c73" -> (known after apply)        
          ~ volume_size           = 8 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.app_server: Destroying... [id=i-07a23f0bb70a9713e]
aws_instance.app_server: Still destroying... [id=i-07a23f0bb70a9713e, 10s elapsed]
aws_instance.app_server: Still destroying... [id=i-07a23f0bb70a9713e, 20s elapsed]
aws_instance.app_server: Still destroying... [id=i-07a23f0bb70a9713e, 30s elapsed]
aws_instance.app_server: Destruction complete after 31s
aws_instance.app_server: Creating...
aws_instance.app_server: Still creating... [10s elapsed]
aws_instance.app_server: Still creating... [20s elapsed]
aws_instance.app_server: Still creating... [30s elapsed]
aws_instance.app_server: Creation complete after 35s [id=i-0ec0211436225abac]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git status
On branch development
Your branch is up to date with 'origin/development'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   .terraform.lock.hcl
        modified:   bootstrap.txt
        modified:   terraform.tfstate
        modified:   terraform101.tf

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        terraform.tfstate.backup

no changes added to commit (use "git add" and/or "git commit -a")

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git add terraform.tfstate.backup
warning: LF will be replaced by CRLF in terraform.tfstate.backup.
The file will have its original line endings in your working directory

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git status
On branch development
Your branch is up to date with 'origin/development'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   terraform.tfstate.backup

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   .terraform.lock.hcl
        modified:   bootstrap.txt
        modified:   terraform.tfstate
        modified:   terraform101.tf


user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git add .
warning: LF will be replaced by CRLF in .terraform.lock.hcl.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in terraform.tfstate.
The file will have its original line endings in your working directory

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git status
On branch development
Your branch is up to date with 'origin/development'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   .terraform.lock.hcl
        modified:   bootstrap.txt
        modified:   terraform.tfstate
        new file:   terraform.tfstate.backup
        modified:   terraform101.tf


user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git commit am "all my terraform file commited"
error: pathspec 'am' did not match any file(s) known to git
error: pathspec 'all my terraform file commited' did not match any file(s) known to git

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git commit -am "all my terraform file commited"
[development 6b6350e] all my terraform file commited
 5 files changed, 174 insertions(+), 17 deletions(-)
 create mode 100644 terraform.tfstate.backup

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ git push
Enumerating objects: 12, done.
Counting objects: 100% (12/12), done.
Delta compression using up to 4 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 3.10 KiB | 1.03 MiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
To https://github.com/jbadru73/devopsbootcamp2021.git
   78432cd..6b6350e  development -> development

user@KIITAN MINGW64 ~/Documents/DevOps/Training/git_managed (development)
$ terraform destroy
aws_instance.app_server: Refreshing state... [id=i-0ec0211436225abac]

Terraform used the selected providers to generate the following execution plan. Resource  
actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.app_server will be destroyed
  - resource "aws_instance" "app_server" {
      - ami                                  = "ami-02b4e72b17337d6c1" -> null
      - arn                                  = "arn:aws:ec2:eu-west-1:257095761812:instance/i-0ec0211436225abac" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "eu-west-1c" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0ec0211436225abac" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "GeneralKP" -> null
      - monitoring                           = false -> null
      - primary_network_interface_id         = "eni-027c8d9272d39b954" -> null
      - private_dns                          = "ip-172-31-27-221.eu-west-1.compute.internal" -> null
      - private_ip                           = "172.31.27.221" -> null
      - public_dns                           = "ec2-54-74-132-3.eu-west-1.compute.amazonaws.com" -> null
      - public_ip                            = "54.74.132.3" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-917499da" -> null
      - tags                                 = {
          - "Name" = "WebServer2"
        } -> null
      - tags_all                             = {
          - "Name" = "WebServer2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data                            = "dfc35b460b42a4aaef68e926aa30ebafa7256a81" 
-> null
      - vpc_security_group_ids               = [
          - "sg-c58fa29b",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-0ea412dae3dda75ae" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_instance.app_server: Destroying... [id=i-0ec0211436225abac]
aws_instance.app_server: Still destroying... [id=i-0ec0211436225abac, 10s elapsed]
aws_instance.app_server: Still destroying... [id=i-0ec0211436225abac, 20s elapsed]
aws_instance.app_server: Still destroying... [id=i-0ec0211436225abac, 30s elapsed]
aws_instance.app_server: Still destroying... [id=i-0ec0211436225abac, 40s elapsed]
aws_instance.app_server: Destruction complete after 42s

Destroy complete! Resources: 1 destroyed.